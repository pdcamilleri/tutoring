Problem 2. Suppose you have k non-empty sorted doubly-linked lists L1, . . . , Lk,
where n = |L1| + . . . + |Lk|. We want to support both
remove-min and remove- max in O(logk) time.
Note that k is not a constant and may change over time,
for example when all elements of a list are removed.
We will only be removing elements from the lists,
so you donâ€™t have to handle insertions.

You are allowed O(n) time to initialize the data structure.
For full marks you need to meet all time requirements.

    this is important. n is the total number of items in all the lists.
    so you are able to traverse the entire set of nodes when setting up
    your solution.

    But after you set everything up in O(n), the operations remove-min and remove-max
    should be O(log k).

    [1, 2, 3, 4, 5, 6]
    [1, 3, 4, 6]
    [6, 7, 8, 9]
    [2, 3, 4, 5, 6]
    [6, 7, 8, 9]
    [2, 3, 4, 5, 6, 6, 6, 6]
    [6, 6, 7, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
    [6, 6, 7, 7, 8, 9, 9]

    do something with these 8 lists
    so that the below operations are log k -> log 8 -> ~3 operations

    O(n) - sum up all of the values in each list
    O(k) - sum up the first value of each list
    O(log n) - if every node was in a tree, then looking up a node would be log n
    O(log k) -
    log n -> 8 * 25 = 200 -> log 200 = operations 8
    log k -> 3 operations.

    remove min -> 1
    remove min -> 1
    remove min -> 2
    remove max -> 9

a) Describe your data structure, i.e., the structure and its operations.

    describe how you setup your data structure initially in O(n) time.
    (include any details that are specific to your solution.)

b) Briefly argue the correctness of your operations.

    justify why you think your "single huge object" will solve the problems
    posed in the assignment spec.

c) Analyse the running time of your operations.

    explain why your setup is O(n) and why remove mix/max are O(log k)

    So this task is about coming up with a data structure that can support these operations.
    data structure is a bit of a fancy term. What it means in this case is that
    we are going to build a "single huge Object" from a bunch of lists. and when we have
     this single huge object, we can only do 2 things to it:
      - remove min (log k)
      - remove max (log k)

    to build our "single huge object" we are allowed to look through all of the lists
    from start to finish, so we can examine every single node. (this is the O(n) thing)

    we can keep everything as lists, or put the n items into different data structures
    (like trees, heaps, stacks, queues, priority queues,
    or different lists with different properties).

    we just need to make sure that we dont do more than O(n) work.
    for example, you might think "why dont we just sort all the elements using
    bubble sort?" well that will be O(n ^ 2) so no good.


    When constructing a data structure, we can define operations on
     these data structures. for example
        list_1
        list_2
        list_1.join(list_2) -> joins the two lists into one (usually called concatenate)
        list_1.minus(list_2) -> [1, 2, 3] - [2] = [1, 3]
        list_1.len()
